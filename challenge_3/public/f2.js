class Form2 extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      line1: '',
      line2: '',
      city: '',
      state: '',
      zipcode: '',
      phone: ''
    };
    this.handleSubmit = this.handleSubmit.bind(this);
    this.handleChange = this.handleChange.bind(this);
  }

  handleSubmit(e) {
    e.preventDefault();
    this.setState();
  }

  handleChange(e) {
    const value = e.target.value;
    this.setState({ ...this.state,
      [e.target.name]: value
    });
  }

  render() {
    return React.createElement("form", {
      onSubmit: this.handleSubmit
    }, React.createElement("label", null, React.createElement("input", {
      type: "text",
      placeholder: "line1",
      name: "line1",
      value: this.state.line1,
      onChange: this.handleChange
    })), React.createElement("label", null, React.createElement("input", {
      type: "text",
      placeholder: "line2",
      name: "line2",
      value: this.state.line2,
      onChange: this.handleChange
    })), React.createElement("label", null, React.createElement("input", {
      type: "text",
      placeholder: "city",
      name: "city",
      value: this.state.city,
      onChange: this.handleChange
    })), React.createElement("label", null, React.createElement("input", {
      type: "text",
      placeholder: "state",
      name: "state",
      value: this.state.state,
      onChange: this.handleChange
    })), React.createElement("label", null, React.createElement("input", {
      type: "text",
      placeholder: "zipcode",
      name: "zipcode",
      value: this.state.zipcode,
      onChange: this.handleChange
    })), React.createElement("label", null, React.createElement("input", {
      type: "text",
      placeholder: "phone",
      name: "phone",
      value: this.state.phone,
      onChange: this.handleChange
    })));
  }

}

export default Form2;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2NsaWVudC9mMi5qc3giXSwibmFtZXMiOlsiRm9ybTIiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJzdGF0ZSIsImxpbmUxIiwibGluZTIiLCJjaXR5IiwiemlwY29kZSIsInBob25lIiwiaGFuZGxlU3VibWl0IiwiYmluZCIsImhhbmRsZUNoYW5nZSIsImUiLCJwcmV2ZW50RGVmYXVsdCIsInNldFN0YXRlIiwidmFsdWUiLCJ0YXJnZXQiLCJuYW1lIiwicmVuZGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxLQUFOLFNBQW9CQyxLQUFLLENBQUNDLFNBQTFCLENBQW9DO0FBQ2xDQyxFQUFBQSxXQUFXLENBQUNDLEtBQUQsRUFBUTtBQUNqQixVQUFNQSxLQUFOO0FBQ0EsU0FBS0MsS0FBTCxHQUFhO0FBQ1hDLE1BQUFBLEtBQUssRUFBRSxFQURJO0FBRVhDLE1BQUFBLEtBQUssRUFBRSxFQUZJO0FBR1hDLE1BQUFBLElBQUksRUFBQyxFQUhNO0FBSVhILE1BQUFBLEtBQUssRUFBRSxFQUpJO0FBS1hJLE1BQUFBLE9BQU8sRUFBRSxFQUxFO0FBTVhDLE1BQUFBLEtBQUssRUFBRTtBQU5JLEtBQWI7QUFRQSxTQUFLQyxZQUFMLEdBQW9CLEtBQUtBLFlBQUwsQ0FBa0JDLElBQWxCLENBQXVCLElBQXZCLENBQXBCO0FBQ0EsU0FBS0MsWUFBTCxHQUFvQixLQUFLQSxZQUFMLENBQWtCRCxJQUFsQixDQUF1QixJQUF2QixDQUFwQjtBQUNEOztBQUVERCxFQUFBQSxZQUFZLENBQUNHLENBQUQsRUFBSTtBQUNkQSxJQUFBQSxDQUFDLENBQUNDLGNBQUY7QUFDQSxTQUFLQyxRQUFMO0FBQ0Q7O0FBRURILEVBQUFBLFlBQVksQ0FBQ0MsQ0FBRCxFQUFJO0FBQ2QsVUFBTUcsS0FBSyxHQUFHSCxDQUFDLENBQUNJLE1BQUYsQ0FBU0QsS0FBdkI7QUFDQSxTQUFLRCxRQUFMLENBQWMsRUFDWixHQUFJLEtBQUtYLEtBREc7QUFDSSxPQUFDUyxDQUFDLENBQUNJLE1BQUYsQ0FBU0MsSUFBVixHQUFpQkY7QUFEckIsS0FBZDtBQUdEOztBQUVERyxFQUFBQSxNQUFNLEdBQUc7QUFDUCxXQUNFO0FBQU0sTUFBQSxRQUFRLEVBQUUsS0FBS1Q7QUFBckIsT0FDRSxtQ0FDRTtBQUFPLE1BQUEsSUFBSSxFQUFDLE1BQVo7QUFBbUIsTUFBQSxXQUFXLEVBQUMsT0FBL0I7QUFBdUMsTUFBQSxJQUFJLEVBQUMsT0FBNUM7QUFBb0QsTUFBQSxLQUFLLEVBQUUsS0FBS04sS0FBTCxDQUFXQyxLQUF0RTtBQUE2RSxNQUFBLFFBQVEsRUFBRSxLQUFLTztBQUE1RixNQURGLENBREYsRUFJRSxtQ0FDRTtBQUFPLE1BQUEsSUFBSSxFQUFDLE1BQVo7QUFBbUIsTUFBQSxXQUFXLEVBQUMsT0FBL0I7QUFBdUMsTUFBQSxJQUFJLEVBQUMsT0FBNUM7QUFBb0QsTUFBQSxLQUFLLEVBQUUsS0FBS1IsS0FBTCxDQUFXRSxLQUF0RTtBQUE2RSxNQUFBLFFBQVEsRUFBRSxLQUFLTTtBQUE1RixNQURGLENBSkYsRUFPRSxtQ0FDRTtBQUFPLE1BQUEsSUFBSSxFQUFDLE1BQVo7QUFBbUIsTUFBQSxXQUFXLEVBQUMsTUFBL0I7QUFBc0MsTUFBQSxJQUFJLEVBQUMsTUFBM0M7QUFBa0QsTUFBQSxLQUFLLEVBQUUsS0FBS1IsS0FBTCxDQUFXRyxJQUFwRTtBQUEwRSxNQUFBLFFBQVEsRUFBRSxLQUFLSztBQUF6RixNQURGLENBUEYsRUFVRSxtQ0FDRTtBQUFPLE1BQUEsSUFBSSxFQUFDLE1BQVo7QUFBbUIsTUFBQSxXQUFXLEVBQUMsT0FBL0I7QUFBdUMsTUFBQSxJQUFJLEVBQUMsT0FBNUM7QUFBb0QsTUFBQSxLQUFLLEVBQUUsS0FBS1IsS0FBTCxDQUFXQSxLQUF0RTtBQUE2RSxNQUFBLFFBQVEsRUFBRSxLQUFLUTtBQUE1RixNQURGLENBVkYsRUFhRSxtQ0FDRTtBQUFPLE1BQUEsSUFBSSxFQUFDLE1BQVo7QUFBbUIsTUFBQSxXQUFXLEVBQUMsU0FBL0I7QUFBeUMsTUFBQSxJQUFJLEVBQUMsU0FBOUM7QUFBd0QsTUFBQSxLQUFLLEVBQUUsS0FBS1IsS0FBTCxDQUFXSSxPQUExRTtBQUFtRixNQUFBLFFBQVEsRUFBRSxLQUFLSTtBQUFsRyxNQURGLENBYkYsRUFnQkUsbUNBQ0U7QUFBTyxNQUFBLElBQUksRUFBQyxNQUFaO0FBQW1CLE1BQUEsV0FBVyxFQUFDLE9BQS9CO0FBQXVDLE1BQUEsSUFBSSxFQUFDLE9BQTVDO0FBQW9ELE1BQUEsS0FBSyxFQUFFLEtBQUtSLEtBQUwsQ0FBV0ssS0FBdEU7QUFBNkUsTUFBQSxRQUFRLEVBQUUsS0FBS0c7QUFBNUYsTUFERixDQWhCRixDQURGO0FBd0JEOztBQXBEaUM7O0FBdURwQyxlQUFlYixLQUFmIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgRm9ybTIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgbGluZTE6ICcnLFxuICAgICAgbGluZTI6ICcnLFxuICAgICAgY2l0eTonJyxcbiAgICAgIHN0YXRlOiAnJyxcbiAgICAgIHppcGNvZGU6ICcnLFxuICAgICAgcGhvbmU6ICcnXG4gICAgfTtcbiAgICB0aGlzLmhhbmRsZVN1Ym1pdCA9IHRoaXMuaGFuZGxlU3VibWl0LmJpbmQodGhpcyk7XG4gICAgdGhpcy5oYW5kbGVDaGFuZ2UgPSB0aGlzLmhhbmRsZUNoYW5nZS5iaW5kKHRoaXMpXG4gIH1cblxuICBoYW5kbGVTdWJtaXQoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLnNldFN0YXRlKCk7XG4gIH1cblxuICBoYW5kbGVDaGFuZ2UoZSkge1xuICAgIGNvbnN0IHZhbHVlID0gZS50YXJnZXQudmFsdWU7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAuLi4gdGhpcy5zdGF0ZSwgW2UudGFyZ2V0Lm5hbWVdOiB2YWx1ZVxuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8Zm9ybSBvblN1Ym1pdD17dGhpcy5oYW5kbGVTdWJtaXR9PlxuICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJsaW5lMVwiIG5hbWU9XCJsaW5lMVwiIHZhbHVlPXt0aGlzLnN0YXRlLmxpbmUxfSBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9PjwvaW5wdXQ+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxsYWJlbD5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj1cImxpbmUyXCIgbmFtZT1cImxpbmUyXCIgdmFsdWU9e3RoaXMuc3RhdGUubGluZTJ9IG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX0+PC9pbnB1dD5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPGxhYmVsPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiY2l0eVwiIG5hbWU9XCJjaXR5XCIgdmFsdWU9e3RoaXMuc3RhdGUuY2l0eX0gb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfT48L2lucHV0PlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJzdGF0ZVwiIG5hbWU9XCJzdGF0ZVwiIHZhbHVlPXt0aGlzLnN0YXRlLnN0YXRlfSBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9PjwvaW5wdXQ+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxsYWJlbD5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj1cInppcGNvZGVcIiBuYW1lPVwiemlwY29kZVwiIHZhbHVlPXt0aGlzLnN0YXRlLnppcGNvZGV9IG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX0+PC9pbnB1dD5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPGxhYmVsPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwicGhvbmVcIiBuYW1lPVwicGhvbmVcIiB2YWx1ZT17dGhpcy5zdGF0ZS5waG9uZX0gb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfT48L2lucHV0PlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICB7LyogPGlucHV0IHR5cGU9XCJzdWJtaXRcIiB2YWx1ZT1cIk5leHRcIj48L2lucHV0PiAqL31cbiAgICAgIDwvZm9ybT5cblxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGb3JtMjsiXX0=